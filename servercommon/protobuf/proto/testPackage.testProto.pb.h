// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/testPackage.testProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftestPackage_2etestProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftestPackage_2etestProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftestPackage_2etestProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftestPackage_2etestProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftestPackage_2etestProto_2eproto;
class CS_SearchRequest;
class CS_SearchRequestDefaultTypeInternal;
extern CS_SearchRequestDefaultTypeInternal _CS_SearchRequest_default_instance_;
class SC_SearchRequest;
class SC_SearchRequestDefaultTypeInternal;
extern SC_SearchRequestDefaultTypeInternal _SC_SearchRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CS_SearchRequest* Arena::CreateMaybeMessage<::CS_SearchRequest>(Arena*);
template<> ::SC_SearchRequest* Arena::CreateMaybeMessage<::SC_SearchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CS_SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_SearchRequest) */ {
 public:
  inline CS_SearchRequest() : CS_SearchRequest(nullptr) {};
  virtual ~CS_SearchRequest();

  CS_SearchRequest(const CS_SearchRequest& from);
  CS_SearchRequest(CS_SearchRequest&& from) noexcept
    : CS_SearchRequest() {
    *this = ::std::move(from);
  }

  inline CS_SearchRequest& operator=(const CS_SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SearchRequest& operator=(CS_SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CS_SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CS_SearchRequest* internal_default_instance() {
    return reinterpret_cast<const CS_SearchRequest*>(
               &_CS_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CS_SearchRequest& a, CS_SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_SearchRequest* New() const final {
    return CreateMaybeMessage<CS_SearchRequest>(nullptr);
  }

  CS_SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CS_SearchRequest& from);
  void MergeFrom(const CS_SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_SearchRequest";
  }
  protected:
  explicit CS_SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftestPackage_2etestProto_2eproto);
    return ::descriptor_table_proto_2ftestPackage_2etestProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurTimeFieldNumber = 1,
  };
  // string cur_time = 1;
  void clear_cur_time();
  const std::string& cur_time() const;
  void set_cur_time(const std::string& value);
  void set_cur_time(std::string&& value);
  void set_cur_time(const char* value);
  void set_cur_time(const char* value, size_t size);
  std::string* mutable_cur_time();
  std::string* release_cur_time();
  void set_allocated_cur_time(std::string* cur_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cur_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cur_time(
      std::string* cur_time);
  private:
  const std::string& _internal_cur_time() const;
  void _internal_set_cur_time(const std::string& value);
  std::string* _internal_mutable_cur_time();
  public:

  // @@protoc_insertion_point(class_scope:CS_SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftestPackage_2etestProto_2eproto;
};
// -------------------------------------------------------------------

class SC_SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_SearchRequest) */ {
 public:
  inline SC_SearchRequest() : SC_SearchRequest(nullptr) {};
  virtual ~SC_SearchRequest();

  SC_SearchRequest(const SC_SearchRequest& from);
  SC_SearchRequest(SC_SearchRequest&& from) noexcept
    : SC_SearchRequest() {
    *this = ::std::move(from);
  }

  inline SC_SearchRequest& operator=(const SC_SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SearchRequest& operator=(SC_SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SC_SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SC_SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SC_SearchRequest*>(
               &_SC_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_SearchRequest& a, SC_SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_SearchRequest* New() const final {
    return CreateMaybeMessage<SC_SearchRequest>(nullptr);
  }

  SC_SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SC_SearchRequest& from);
  void MergeFrom(const SC_SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_SearchRequest";
  }
  protected:
  explicit SC_SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftestPackage_2etestProto_2eproto);
    return ::descriptor_table_proto_2ftestPackage_2etestProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerMsgFieldNumber = 1,
  };
  // string answer_msg = 1;
  void clear_answer_msg();
  const std::string& answer_msg() const;
  void set_answer_msg(const std::string& value);
  void set_answer_msg(std::string&& value);
  void set_answer_msg(const char* value);
  void set_answer_msg(const char* value, size_t size);
  std::string* mutable_answer_msg();
  std::string* release_answer_msg();
  void set_allocated_answer_msg(std::string* answer_msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_answer_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_answer_msg(
      std::string* answer_msg);
  private:
  const std::string& _internal_answer_msg() const;
  void _internal_set_answer_msg(const std::string& value);
  std::string* _internal_mutable_answer_msg();
  public:

  // @@protoc_insertion_point(class_scope:SC_SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftestPackage_2etestProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CS_SearchRequest

// string cur_time = 1;
inline void CS_SearchRequest::clear_cur_time() {
  cur_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CS_SearchRequest::cur_time() const {
  // @@protoc_insertion_point(field_get:CS_SearchRequest.cur_time)
  return _internal_cur_time();
}
inline void CS_SearchRequest::set_cur_time(const std::string& value) {
  _internal_set_cur_time(value);
  // @@protoc_insertion_point(field_set:CS_SearchRequest.cur_time)
}
inline std::string* CS_SearchRequest::mutable_cur_time() {
  // @@protoc_insertion_point(field_mutable:CS_SearchRequest.cur_time)
  return _internal_mutable_cur_time();
}
inline const std::string& CS_SearchRequest::_internal_cur_time() const {
  return cur_time_.Get();
}
inline void CS_SearchRequest::_internal_set_cur_time(const std::string& value) {
  
  cur_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CS_SearchRequest::set_cur_time(std::string&& value) {
  
  cur_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CS_SearchRequest.cur_time)
}
inline void CS_SearchRequest::set_cur_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cur_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CS_SearchRequest.cur_time)
}
inline void CS_SearchRequest::set_cur_time(const char* value,
    size_t size) {
  
  cur_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CS_SearchRequest.cur_time)
}
inline std::string* CS_SearchRequest::_internal_mutable_cur_time() {
  
  return cur_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CS_SearchRequest::release_cur_time() {
  // @@protoc_insertion_point(field_release:CS_SearchRequest.cur_time)
  return cur_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CS_SearchRequest::set_allocated_cur_time(std::string* cur_time) {
  if (cur_time != nullptr) {
    
  } else {
    
  }
  cur_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CS_SearchRequest.cur_time)
}
inline std::string* CS_SearchRequest::unsafe_arena_release_cur_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CS_SearchRequest.cur_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cur_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CS_SearchRequest::unsafe_arena_set_allocated_cur_time(
    std::string* cur_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cur_time != nullptr) {
    
  } else {
    
  }
  cur_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cur_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CS_SearchRequest.cur_time)
}

// -------------------------------------------------------------------

// SC_SearchRequest

// string answer_msg = 1;
inline void SC_SearchRequest::clear_answer_msg() {
  answer_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SC_SearchRequest::answer_msg() const {
  // @@protoc_insertion_point(field_get:SC_SearchRequest.answer_msg)
  return _internal_answer_msg();
}
inline void SC_SearchRequest::set_answer_msg(const std::string& value) {
  _internal_set_answer_msg(value);
  // @@protoc_insertion_point(field_set:SC_SearchRequest.answer_msg)
}
inline std::string* SC_SearchRequest::mutable_answer_msg() {
  // @@protoc_insertion_point(field_mutable:SC_SearchRequest.answer_msg)
  return _internal_mutable_answer_msg();
}
inline const std::string& SC_SearchRequest::_internal_answer_msg() const {
  return answer_msg_.Get();
}
inline void SC_SearchRequest::_internal_set_answer_msg(const std::string& value) {
  
  answer_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SC_SearchRequest::set_answer_msg(std::string&& value) {
  
  answer_msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SC_SearchRequest.answer_msg)
}
inline void SC_SearchRequest::set_answer_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  answer_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SC_SearchRequest.answer_msg)
}
inline void SC_SearchRequest::set_answer_msg(const char* value,
    size_t size) {
  
  answer_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SC_SearchRequest.answer_msg)
}
inline std::string* SC_SearchRequest::_internal_mutable_answer_msg() {
  
  return answer_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SC_SearchRequest::release_answer_msg() {
  // @@protoc_insertion_point(field_release:SC_SearchRequest.answer_msg)
  return answer_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SC_SearchRequest::set_allocated_answer_msg(std::string* answer_msg) {
  if (answer_msg != nullptr) {
    
  } else {
    
  }
  answer_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SC_SearchRequest.answer_msg)
}
inline std::string* SC_SearchRequest::unsafe_arena_release_answer_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SC_SearchRequest.answer_msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return answer_msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SC_SearchRequest::unsafe_arena_set_allocated_answer_msg(
    std::string* answer_msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (answer_msg != nullptr) {
    
  } else {
    
  }
  answer_msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      answer_msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SC_SearchRequest.answer_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftestPackage_2etestProto_2eproto
