// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_proto3_optional.proto

#include "google/protobuf/unittest_proto3_optional.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestProto3Optional_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto;
namespace protobuf_unittest {
class TestProto3Optional_NestedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestProto3Optional_NestedMessage> _instance;
} _TestProto3Optional_NestedMessage_default_instance_;
class TestProto3OptionalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestProto3Optional> _instance;
} _TestProto3Optional_default_instance_;
}  // namespace protobuf_unittest
static void InitDefaultsscc_info_TestProto3Optional_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestProto3Optional_default_instance_;
    new (ptr) ::protobuf_unittest::TestProto3Optional();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestProto3Optional::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestProto3Optional_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestProto3Optional_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto}, {
      &scc_info_TestProto3Optional_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.base,}};

static void InitDefaultsscc_info_TestProto3Optional_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobuf_unittest::_TestProto3Optional_NestedMessage_default_instance_;
    new (ptr) ::protobuf_unittest::TestProto3Optional_NestedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobuf_unittest::TestProto3Optional_NestedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestProto3Optional_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestProto3Optional_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional_NestedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional_NestedMessage, bb_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, lazy_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, optional_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, singular_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_unittest::TestProto3Optional, singular_int64_),
  6,
  5,
  7,
  8,
  10,
  9,
  11,
  12,
  14,
  13,
  15,
  16,
  17,
  0,
  1,
  2,
  3,
  4,
  18,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::protobuf_unittest::TestProto3Optional_NestedMessage)},
  { 7, 33, sizeof(::protobuf_unittest::TestProto3Optional)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestProto3Optional_NestedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_unittest::_TestProto3Optional_default_instance_),
};

const char descriptor_table_protodef_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.google/protobuf/unittest_proto3_option"
  "al.proto\022\021protobuf_unittest\"\261\n\n\022TestProt"
  "o3Optional\022\033\n\016optional_int32\030\001 \001(\005H\000\210\001\001\022"
  "\033\n\016optional_int64\030\002 \001(\003H\001\210\001\001\022\034\n\017optional"
  "_uint32\030\003 \001(\rH\002\210\001\001\022\034\n\017optional_uint64\030\004 "
  "\001(\004H\003\210\001\001\022\034\n\017optional_sint32\030\005 \001(\021H\004\210\001\001\022\034"
  "\n\017optional_sint64\030\006 \001(\022H\005\210\001\001\022\035\n\020optional"
  "_fixed32\030\007 \001(\007H\006\210\001\001\022\035\n\020optional_fixed64\030"
  "\010 \001(\006H\007\210\001\001\022\036\n\021optional_sfixed32\030\t \001(\017H\010\210"
  "\001\001\022\036\n\021optional_sfixed64\030\n \001(\020H\t\210\001\001\022\033\n\016op"
  "tional_float\030\013 \001(\002H\n\210\001\001\022\034\n\017optional_doub"
  "le\030\014 \001(\001H\013\210\001\001\022\032\n\roptional_bool\030\r \001(\010H\014\210\001"
  "\001\022\034\n\017optional_string\030\016 \001(\tH\r\210\001\001\022\033\n\016optio"
  "nal_bytes\030\017 \001(\014H\016\210\001\001\022\036\n\roptional_cord\030\020 "
  "\001(\tB\002\010\001H\017\210\001\001\022Y\n\027optional_nested_message\030"
  "\022 \001(\01323.protobuf_unittest.TestProto3Opti"
  "onal.NestedMessageH\020\210\001\001\022Y\n\023lazy_nested_m"
  "essage\030\023 \001(\01323.protobuf_unittest.TestPro"
  "to3Optional.NestedMessageB\002(\001H\021\210\001\001\022S\n\024op"
  "tional_nested_enum\030\025 \001(\01620.protobuf_unit"
  "test.TestProto3Optional.NestedEnumH\022\210\001\001\022"
  "\026\n\016singular_int32\030\026 \001(\005\022\026\n\016singular_int6"
  "4\030\027 \001(\003\032\'\n\rNestedMessage\022\017\n\002bb\030\001 \001(\005H\000\210\001"
  "\001B\005\n\003_bb\"J\n\nNestedEnum\022\017\n\013UNSPECIFIED\020\000\022"
  "\007\n\003FOO\020\001\022\007\n\003BAR\020\002\022\007\n\003BAZ\020\003\022\020\n\003NEG\020\377\377\377\377\377\377"
  "\377\377\377\001B\021\n\017_optional_int32B\021\n\017_optional_int"
  "64B\022\n\020_optional_uint32B\022\n\020_optional_uint"
  "64B\022\n\020_optional_sint32B\022\n\020_optional_sint"
  "64B\023\n\021_optional_fixed32B\023\n\021_optional_fix"
  "ed64B\024\n\022_optional_sfixed32B\024\n\022_optional_"
  "sfixed64B\021\n\017_optional_floatB\022\n\020_optional"
  "_doubleB\020\n\016_optional_boolB\022\n\020_optional_s"
  "tringB\021\n\017_optional_bytesB\020\n\016_optional_co"
  "rdB\032\n\030_optional_nested_messageB\026\n\024_lazy_"
  "nested_messageB\027\n\025_optional_nested_enumB"
  "%\n!com.google.protobuf.testing.protoP\001b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_sccs[2] = {
  &scc_info_TestProto3Optional_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.base,
  &scc_info_TestProto3Optional_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto = {
  false, false, descriptor_table_protodef_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto, "google/protobuf/unittest_proto3_optional.proto", 1446,
  &descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_once, descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_sccs, descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto::offsets,
  file_level_metadata_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto, 2, file_level_enum_descriptors_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto, file_level_service_descriptors_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto)), true);
namespace protobuf_unittest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestProto3Optional_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto[0];
}
bool TestProto3Optional_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TestProto3Optional_NestedEnum TestProto3Optional::UNSPECIFIED;
constexpr TestProto3Optional_NestedEnum TestProto3Optional::FOO;
constexpr TestProto3Optional_NestedEnum TestProto3Optional::BAR;
constexpr TestProto3Optional_NestedEnum TestProto3Optional::BAZ;
constexpr TestProto3Optional_NestedEnum TestProto3Optional::NEG;
constexpr TestProto3Optional_NestedEnum TestProto3Optional::NestedEnum_MIN;
constexpr TestProto3Optional_NestedEnum TestProto3Optional::NestedEnum_MAX;
constexpr int TestProto3Optional::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TestProto3Optional_NestedMessage::InitAsDefaultInstance() {
}
class TestProto3Optional_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestProto3Optional_NestedMessage>()._has_bits_);
  static void set_has_bb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestProto3Optional_NestedMessage::TestProto3Optional_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestProto3Optional.NestedMessage)
}
TestProto3Optional_NestedMessage::TestProto3Optional_NestedMessage(const TestProto3Optional_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bb_ = from.bb_;
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestProto3Optional.NestedMessage)
}

void TestProto3Optional_NestedMessage::SharedCtor() {
  bb_ = 0;
}

TestProto3Optional_NestedMessage::~TestProto3Optional_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestProto3Optional.NestedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestProto3Optional_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestProto3Optional_NestedMessage::ArenaDtor(void* object) {
  TestProto3Optional_NestedMessage* _this = reinterpret_cast< TestProto3Optional_NestedMessage* >(object);
  (void)_this;
}
void TestProto3Optional_NestedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestProto3Optional_NestedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestProto3Optional_NestedMessage& TestProto3Optional_NestedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestProto3Optional_NestedMessage_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.base);
  return *internal_default_instance();
}


void TestProto3Optional_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestProto3Optional.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bb_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestProto3Optional_NestedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bb(&has_bits);
          bb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestProto3Optional_NestedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestProto3Optional.NestedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bb = 1;
  if (_internal_has_bb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestProto3Optional.NestedMessage)
  return target;
}

size_t TestProto3Optional_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestProto3Optional.NestedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bb = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestProto3Optional_NestedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestProto3Optional.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestProto3Optional_NestedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestProto3Optional_NestedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestProto3Optional.NestedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestProto3Optional.NestedMessage)
    MergeFrom(*source);
  }
}

void TestProto3Optional_NestedMessage::MergeFrom(const TestProto3Optional_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestProto3Optional.NestedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bb()) {
    _internal_set_bb(from._internal_bb());
  }
}

void TestProto3Optional_NestedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestProto3Optional.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestProto3Optional_NestedMessage::CopyFrom(const TestProto3Optional_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestProto3Optional.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestProto3Optional_NestedMessage::IsInitialized() const {
  return true;
}

void TestProto3Optional_NestedMessage::InternalSwap(TestProto3Optional_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bb_, other->bb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestProto3Optional_NestedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestProto3Optional::InitAsDefaultInstance() {
  ::protobuf_unittest::_TestProto3Optional_default_instance_._instance.get_mutable()->optional_nested_message_ = const_cast< ::protobuf_unittest::TestProto3Optional_NestedMessage*>(
      ::protobuf_unittest::TestProto3Optional_NestedMessage::internal_default_instance());
  ::protobuf_unittest::_TestProto3Optional_default_instance_._instance.get_mutable()->lazy_nested_message_ = const_cast< ::protobuf_unittest::TestProto3Optional_NestedMessage*>(
      ::protobuf_unittest::TestProto3Optional_NestedMessage::internal_default_instance());
}
class TestProto3Optional::_Internal {
 public:
  using HasBits = decltype(std::declval<TestProto3Optional>()._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optional_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_optional_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_optional_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optional_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_optional_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_optional_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_optional_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf_unittest::TestProto3Optional_NestedMessage& optional_nested_message(const TestProto3Optional* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_unittest::TestProto3Optional_NestedMessage& lazy_nested_message(const TestProto3Optional* msg);
  static void set_has_lazy_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_optional_nested_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::protobuf_unittest::TestProto3Optional_NestedMessage&
TestProto3Optional::_Internal::optional_nested_message(const TestProto3Optional* msg) {
  return *msg->optional_nested_message_;
}
const ::protobuf_unittest::TestProto3Optional_NestedMessage&
TestProto3Optional::_Internal::lazy_nested_message(const TestProto3Optional* msg) {
  return *msg->lazy_nested_message_;
}
TestProto3Optional::TestProto3Optional(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf_unittest.TestProto3Optional)
}
TestProto3Optional::TestProto3Optional(const TestProto3Optional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArena());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_bytes(),
      GetArena());
  }
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_cord()) {
    optional_cord_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_cord(),
      GetArena());
  }
  if (from._internal_has_optional_nested_message()) {
    optional_nested_message_ = new ::protobuf_unittest::TestProto3Optional_NestedMessage(*from.optional_nested_message_);
  } else {
    optional_nested_message_ = nullptr;
  }
  if (from._internal_has_lazy_nested_message()) {
    lazy_nested_message_ = new ::protobuf_unittest::TestProto3Optional_NestedMessage(*from.lazy_nested_message_);
  } else {
    lazy_nested_message_ = nullptr;
  }
  ::memcpy(&optional_int64_, &from.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&singular_int64_) -
    reinterpret_cast<char*>(&optional_int64_)) + sizeof(singular_int64_));
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.TestProto3Optional)
}

void TestProto3Optional::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestProto3Optional_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.base);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&optional_nested_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&singular_int64_) -
      reinterpret_cast<char*>(&optional_nested_message_)) + sizeof(singular_int64_));
}

TestProto3Optional::~TestProto3Optional() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.TestProto3Optional)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestProto3Optional::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_cord_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optional_nested_message_;
  if (this != internal_default_instance()) delete lazy_nested_message_;
}

void TestProto3Optional::ArenaDtor(void* object) {
  TestProto3Optional* _this = reinterpret_cast< TestProto3Optional* >(object);
  (void)_this;
}
void TestProto3Optional::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestProto3Optional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestProto3Optional& TestProto3Optional::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestProto3Optional_google_2fprotobuf_2funittest_5fproto3_5foptional_2eproto.base);
  return *internal_default_instance();
}


void TestProto3Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_unittest.TestProto3Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      optional_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      if (GetArena() == nullptr && optional_nested_message_ != nullptr) {
        delete optional_nested_message_;
      }
      optional_nested_message_ = nullptr;
    }
    if (cached_has_bits & 0x00000010u) {
      if (GetArena() == nullptr && lazy_nested_message_ != nullptr) {
        delete lazy_nested_message_;
      }
      lazy_nested_message_ = nullptr;
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&optional_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_uint32_) -
        reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_uint32_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&optional_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_float_) -
        reinterpret_cast<char*>(&optional_uint64_)) + sizeof(optional_float_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&optional_double_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_nested_enum_) -
        reinterpret_cast<char*>(&optional_double_)) + sizeof(optional_nested_enum_));
  }
  ::memset(&singular_int32_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&singular_int64_) -
      reinterpret_cast<char*>(&singular_int32_)) + sizeof(singular_int64_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestProto3Optional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_optional_int32(&has_bits);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optional_int64(&has_bits);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_optional_uint32(&has_bits);
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_optional_uint64(&has_bits);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_optional_sint32(&has_bits);
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_optional_sint64(&has_bits);
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_optional_fixed32(&has_bits);
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_optional_fixed64(&has_bits);
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_optional_sfixed32(&has_bits);
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_optional_sfixed64(&has_bits);
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_optional_float(&has_bits);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_optional_double(&has_bits);
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_optional_bool(&has_bits);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestProto3Optional.optional_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string optional_cord = 16 [ctype = CORD];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_unittest.TestProto3Optional.optional_cord"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_unittest.TestProto3Optional.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_unittest.TestProto3Optional.NestedMessage lazy_nested_message = 19 [lazy = true];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_lazy_nested_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_unittest.TestProto3Optional.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_optional_nested_enum(static_cast<::protobuf_unittest::TestProto3Optional_NestedEnum>(val));
        } else goto handle_unusual;
        continue;
      // int32 singular_int32 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          singular_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 singular_int64 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          singular_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestProto3Optional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_unittest.TestProto3Optional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optional_int32 = 1;
  if (_internal_has_optional_int32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // int64 optional_int64 = 2;
  if (_internal_has_optional_int64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // uint32 optional_uint32 = 3;
  if (_internal_has_optional_uint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // uint64 optional_uint64 = 4;
  if (_internal_has_optional_uint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // sint32 optional_sint32 = 5;
  if (_internal_has_optional_sint32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // sint64 optional_sint64 = 6;
  if (_internal_has_optional_sint64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // fixed32 optional_fixed32 = 7;
  if (_internal_has_optional_fixed32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // fixed64 optional_fixed64 = 8;
  if (_internal_has_optional_fixed64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // sfixed32 optional_sfixed32 = 9;
  if (_internal_has_optional_sfixed32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // sfixed64 optional_sfixed64 = 10;
  if (_internal_has_optional_sfixed64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // float optional_float = 11;
  if (_internal_has_optional_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // double optional_double = 12;
  if (_internal_has_optional_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // bool optional_bool = 13;
  if (_internal_has_optional_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // string optional_string = 14;
  if (_internal_has_optional_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.TestProto3Optional.optional_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // bytes optional_bytes = 15;
  if (_internal_has_optional_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // string optional_cord = 16 [ctype = CORD];
  if (_internal_has_optional_cord()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_optional_cord().data(), static_cast<int>(this->_internal_optional_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protobuf_unittest.TestProto3Optional.optional_cord");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_optional_cord(), target);
  }

  // .protobuf_unittest.TestProto3Optional.NestedMessage optional_nested_message = 18;
  if (_internal_has_optional_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::optional_nested_message(this), target, stream);
  }

  // .protobuf_unittest.TestProto3Optional.NestedMessage lazy_nested_message = 19 [lazy = true];
  if (_internal_has_lazy_nested_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::lazy_nested_message(this), target, stream);
  }

  // .protobuf_unittest.TestProto3Optional.NestedEnum optional_nested_enum = 21;
  if (_internal_has_optional_nested_enum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // int32 singular_int32 = 22;
  if (this->singular_int32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_singular_int32(), target);
  }

  // int64 singular_int64 = 23;
  if (this->singular_int64() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_singular_int64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_unittest.TestProto3Optional)
  return target;
}

size_t TestProto3Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_unittest.TestProto3Optional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // string optional_string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // bytes optional_bytes = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // string optional_cord = 16 [ctype = CORD];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_cord());
    }

    // .protobuf_unittest.TestProto3Optional.NestedMessage optional_nested_message = 18;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_nested_message_);
    }

    // .protobuf_unittest.TestProto3Optional.NestedMessage lazy_nested_message = 19 [lazy = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lazy_nested_message_);
    }

    // int64 optional_int64 = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_optional_int64());
    }

    // int32 optional_int32 = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

    // uint32 optional_uint32 = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_optional_uint32());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // uint64 optional_uint64 = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_optional_uint64());
    }

    // sint64 optional_sint64 = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_optional_sint64());
    }

    // sint32 optional_sint32 = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_optional_sint32());
    }

    // fixed32 optional_fixed32 = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // fixed64 optional_fixed64 = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // sfixed64 optional_sfixed64 = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // sfixed32 optional_sfixed32 = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // float optional_float = 11;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // double optional_double = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // bool optional_bool = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // .protobuf_unittest.TestProto3Optional.NestedEnum optional_nested_enum = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
    }

  }
  // int32 singular_int32 = 22;
  if (this->singular_int32() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_singular_int32());
  }

  // int64 singular_int64 = 23;
  if (this->singular_int64() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_singular_int64());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestProto3Optional::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf_unittest.TestProto3Optional)
  GOOGLE_DCHECK_NE(&from, this);
  const TestProto3Optional* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestProto3Optional>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf_unittest.TestProto3Optional)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf_unittest.TestProto3Optional)
    MergeFrom(*source);
  }
}

void TestProto3Optional::MergeFrom(const TestProto3Optional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_unittest.TestProto3Optional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_optional_cord(from._internal_optional_cord());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_optional_nested_message()->::protobuf_unittest::TestProto3Optional_NestedMessage::MergeFrom(from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_lazy_nested_message()->::protobuf_unittest::TestProto3Optional_NestedMessage::MergeFrom(from._internal_lazy_nested_message());
    }
    if (cached_has_bits & 0x00000020u) {
      optional_int64_ = from.optional_int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x00000080u) {
      optional_uint32_ = from.optional_uint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x00000200u) {
      optional_sint64_ = from.optional_sint64_;
    }
    if (cached_has_bits & 0x00000400u) {
      optional_sint32_ = from.optional_sint32_;
    }
    if (cached_has_bits & 0x00000800u) {
      optional_fixed32_ = from.optional_fixed32_;
    }
    if (cached_has_bits & 0x00001000u) {
      optional_fixed64_ = from.optional_fixed64_;
    }
    if (cached_has_bits & 0x00002000u) {
      optional_sfixed64_ = from.optional_sfixed64_;
    }
    if (cached_has_bits & 0x00004000u) {
      optional_sfixed32_ = from.optional_sfixed32_;
    }
    if (cached_has_bits & 0x00008000u) {
      optional_float_ = from.optional_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      optional_double_ = from.optional_double_;
    }
    if (cached_has_bits & 0x00020000u) {
      optional_bool_ = from.optional_bool_;
    }
    if (cached_has_bits & 0x00040000u) {
      optional_nested_enum_ = from.optional_nested_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.singular_int32() != 0) {
    _internal_set_singular_int32(from._internal_singular_int32());
  }
  if (from.singular_int64() != 0) {
    _internal_set_singular_int64(from._internal_singular_int64());
  }
}

void TestProto3Optional::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf_unittest.TestProto3Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestProto3Optional::CopyFrom(const TestProto3Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_unittest.TestProto3Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestProto3Optional::IsInitialized() const {
  return true;
}

void TestProto3Optional::InternalSwap(TestProto3Optional* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_bytes_.Swap(&other->optional_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_cord_.Swap(&other->optional_cord_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestProto3Optional, singular_int64_)
      + sizeof(TestProto3Optional::singular_int64_)
      - PROTOBUF_FIELD_OFFSET(TestProto3Optional, optional_nested_message_)>(
          reinterpret_cast<char*>(&optional_nested_message_),
          reinterpret_cast<char*>(&other->optional_nested_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestProto3Optional::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestProto3Optional_NestedMessage* Arena::CreateMaybeMessage< ::protobuf_unittest::TestProto3Optional_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestProto3Optional_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_unittest::TestProto3Optional* Arena::CreateMaybeMessage< ::protobuf_unittest::TestProto3Optional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_unittest::TestProto3Optional >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
